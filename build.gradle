buildscript {

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
    
    repositories {
		mavenCentral()
        maven { url "http://repo.spring.io/libs-milestone" }
		maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = 'spring-starter'
    version =  '1.0.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/webapp"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDirs = ['src/integrationTest/java']
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    // I use Log4j, exclude default one Spring Boot provides
    compile.exclude module: 'spring-boot-starter-logging'
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
	// Spring boot
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")

    // Log4j
    compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

	// Mapping framework
    compile("net.sf.dozer:dozer:${dozerVersion}")
    
    // Amazon Web Services
    compile("org.springframework.cloud:spring-cloud-aws-context:${springAWSVersion}")
    
    // Util to manipulate IO
    compile("commons-io:commons-io:${apacheCommonsVersion}")
    
    // Security
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.security:spring-security-taglibs")
    compile("com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:${owaspSanitizer}")
    
    // Frontend
    compile("org.apache.tiles:tiles-extras:${apacheTilesExtra}")
    compile("javax.servlet:jstl:${jstlVersion}")
    
    // JPA Driver for Database
    compile("org.postgresql:postgresql:${postgresqlVersion}")
    compile("org.hibernate:hibernate-hikaricp:${hikaricpVersion}")
	// SQLite
	compile('org.xerial:sqlite-jdbc:3.8.11.2')
    // H2 In Memory
    compile("com.h2database:h2:${h2Version}")
    // Hibernate Second Level Cache
    compile("org.hibernate:hibernate-ehcache:${hibernateSecondLevelCacheVersion}")

    // Tomcat
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.apache.tomcat.embed:tomcat-embed-jasper")

    // Testing
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    // Integration test are always out of date, so they will alway run even if there are no changes
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test
